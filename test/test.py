# print('hello world')
# n = 6
# for i in range(n + 1):
#     for j in range(i + 1):
#         u = (n - i) / n
#         v = (i - j) / n
#         w = 1 - u - v
#         print('{%f, %f, %f},' % (u, v, w))
#     print()
#
# a = [0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .4390243902439024,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .6585365853658537,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .6585365853658537,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .6585365853658537,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .8780487804878049,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .6585365853658537,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .4390243902439024,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .6585365853658537,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .6585365853658537,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .4390243902439024,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      1.0,
#      - .8333333333333334,
#      - .8333333333333334,
#      .3333333333333333,
#      .2784552845528455,
#      .3333333333333333,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      3.0,
#      0.0,
#      - 1.5,
#      - .9969512195121951,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      3.0,
#      0.0,
#      - .9969512195121951,
#      - 1.5,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      - 1.5,
#      0.0,
#      3.0,
#      - .9969512195121951,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      - 1.5,
#      0.0,
#      - .9969512195121951,
#      3.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      .3333333333333333,
#      0.0,
#      - .8333333333333334,
#      .2784552845528455,
#      0.0,
#      1.0,
#      - .8333333333333334,
#      .3333333333333333,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      - .9969512195121951,
#      0.0,
#      0.0,
#      3.0,
#      - 1.5,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      0.0,
#      - .9969512195121951,
#      0.0,
#      0.0,
#      - 1.5,
#      3.0,
#      0.0,
#      0.0,
#      0.0,
#      .3333333333333333,
#      0.0,
#      .2784552845528455,
#      - .8333333333333334,
#      0.0,
#      .3333333333333333,
#      - .8333333333333334,
#      1.0]
#
# print(len(a))
# b = [
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4390243902439024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.6585365853658537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6585365853658537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.6585365853658537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8780487804878049, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6585365853658537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4390243902439024, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6585365853658537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6585365853658537,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4390243902439024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
#     -0.8333333333333334, -0.8333333333333334, 0.3333333333333333, 0.2784552845528455, 0.3333333333333333, 0.0, 0.0, 0.0,
#     0.0, 0.0, 3.0, 0.0, -1.5, -0.9969512195121951, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, -0.9969512195121951, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5, 0.0, 3.0,
#     -0.9969512195121951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5, 0.0, -0.9969512195121951, 3.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.3333333333333333, 0.0,
#     -0.8333333333333334, 0.2784552845528455, 0.0, 1.0, -0.8333333333333334, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0,
#     -0.9969512195121951, 0.0, 0.0, 3.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9969512195121951, 0.0, 0.0, -1.5, 3.0, 0.0,
#     0.0, 0.0, 0.3333333333333333, 0.0, 0.2784552845528455, -0.8333333333333334, 0.0, 0.3333333333333333,
#     -0.8333333333333334, 1.0,
# ]
#
# c = [
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, -0.8333333333333334, 3.0, 0.0, -1.5, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, -0.8333333333333334, 0.0, 3.0, 0.0, -1.5, 0.0, 0.0, 0.0, 0.3333333333333333,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, -1.5, 0.0, 3.0, 0.0, -0.8333333333333334, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.4390243902439024, 0.0, 0.0, 0.6585365853658537, 0.6585365853658537, 0.0, 0.0,
#     0.6585365853658537, 0.8780487804878049, 0.6585365853658537, 0.0, 0.0, 0.4390243902439024, 0.6585365853658537,
#     0.6585365853658537, 0.4390243902439024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2784552845528455,
#     -0.9969512195121951, -0.9969512195121951, -0.9969512195121951, -0.9969512195121951, 0.2784552845528455,
#     -0.9969512195121951, -0.9969512195121951, 0.2784552845528455,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, -1.5, 0.0, 3.0, 0.0, 0.0, 0.0, -0.8333333333333334,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8333333333333334, 3.0, -1.5, 0.3333333333333333,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, -1.5, 3.0, -0.8333333333333334,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
# ]
#
# for i in range(10):
#     for j in range(37):
#         print(a[i * 10 + j], end=', ')
#     print()
#
# a = [
#     [1.000000, 0.000000, 0.000000],
#
#     [0.833333, 0.166667, 0.000000],
#     [0.833333, 0.000000, 0.166667],
#
#     [0.666667, 0.333333, 0.000000],
#     [0.666667, 0.166667, 0.166667],
#     [0.666667, 0.000000, 0.333333],
#
#     [0.500000, 0.500000, 0.000000],
#     [0.500000, 0.333333, 0.166667],
#     [0.500000, 0.166667, 0.333333],
#     [0.500000, 0.000000, 0.500000],
#
#     [0.333333, 0.666667, 0.000000],
#     [0.333333, 0.500000, 0.166667],
#     [0.333333, 0.333333, 0.333333],
#     [0.333333, 0.166667, 0.500000],
#     [0.333333, 0.000000, 0.666667],
#
#     [0.166667, 0.833333, 0.000000],
#     [0.166667, 0.666667, 0.166667],
#     [0.166667, 0.500000, 0.333333],
#     [0.166667, 0.333333, 0.500000],
#     [0.166667, 0.166667, 0.666667],
#     [0.166667, 0.000000, 0.833333],
#
#     [0.000000, 1.000000, 0.000000],
#     [0.000000, 0.833333, 0.166667],
#     [0.000000, 0.666667, 0.333333],
#     [0.000000, 0.500000, 0.500000],
#     [0.000000, 0.333333, 0.666667],
#     [0.000000, 0.166667, 0.833333],
#     [0.000000, 0.000000, 1.000000],
#
#     [1, 0, 0],
#     [0.6667, 0.3333, 0], [0.6667, 0, 0.3333],
#     [0.3333, 0.6667, 0], [0.3333, 0.3333, 0.3333], [0.3333, 0, 0.6667],
#     [0, 1, 0], [0, 0.6667, 0.3333], [0, 0.3333, 0.6667], [0, 0, 1]
# ]
#
# t = [1, 2, 4]
# results = []
# for i in a:
#     result = 0
#     for index, j in enumerate(i):
#         if j == 0:
#             result += t[index]
#     results.append(result)
#
# index = 0
# for i in range(1, 8):
#     for j in range(i):
#         print(results[index], end=',')
#         index += 1
#     print()
#
# for i in range(1, 5):
#     for j in range(i):
#         print(results[index], end=',')
#         index += 1
#     print()

a = 1

# def fun():
#     global a
#     print(a)
#     a = 2
# fun()
# print(a)

import numpy as np

with open('20.txt') as file:
    offset_number_l, indexes_l, parameter_l = file

offset_number = np.asarray([int(x) for x in offset_number_l.strip().split(" ")], dtype=np.int)
offset_number.shape = (-1, 2)

indexes = np.asarray([int(x) for x in indexes_l.strip().split(" ")], dtype=np.int)
indexes.shape = (-1, 3)
parameter = np.asarray([float(x) for x in parameter_l.strip().split(" ")], dtype=np.float32)
parameter.shape = (-1, 3)

pass

n = 15
look_up_table_for_i = [0]
for i in range(1, 15):
    ii = min(n - i, i)
    look_up_table_for_i.append(int(look_up_table_for_i[-1] + (1 + ii) * ii / 2 + max(0, i * (n - 2 * i))))

print(look_up_table_for_i)


def getOffset(i, j, k):
    if j - i <= factor - 2 * i:
        return look_up_table_for_i[i-1] + (j - i) * i + k - j
    else:
        # print(compute_n + (j - i) * (factor - 2 * i))
        h = min(i, n - i)
        gl = h - (n - j)
        qianmian = max((n - 2 * i) * i, 0)
        zhebian = (h + (h - gl + 1)) * gl / 2
        return look_up_table_for_i[i-1] + qianmian + zhebian + k - j


real_n = 0
compute_n = 0
factor = 25
for i in range(1, factor):
    for j in range(i, factor):
        for k in range(j, factor):
            if i + j > k > abs(i - j):
                # print((i, j, k), end=" ")
                if j - i <= factor - 2 * i:
                    print(compute_n + (j - i) * i + k - j, real_n, getOffset(i, j, k), end=" ")
                else:
                    # print(compute_n + (j - i) * (factor - 2 * i))
                    h = min(i, factor - i)
                    gl = h - (factor - j)
                    qianmian = max((factor - 2 * i) * i, 0)
                    zhebian = (h + (h - gl + 1)) * gl / 2
                    print(compute_n + qianmian + zhebian + k - j, real_n, getOffset(i, j, k),
                          end=" ")
                real_n += 1

        print()

    ii = min(factor - i, i)
    compute_n += (1 + ii) * ii / 2 + max(0, i * (factor - 2 * i))
    # print(real_n)
    # print(compute_n)
    print()
    print()
