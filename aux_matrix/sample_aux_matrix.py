import numpy as np

sample_aux_matrix = [
    # ------------------ MB1f, 首地址0 ------------------# 0
    np.array([1.0]),
    # ------------------ MB2, 首地址1 ------------------# 1
    np.array([1.0, 0.0,
              -1.0, 1.0]),
    # ------------------ MB30, 首地址5 -----------------# 2
    np.array([1.0, 0.0, 0.0,
              -2.0, 2.0, 0.0,
              1.0, -2.0, 1.0]),
    # ------------------ MB31, 首地址14 -----------------# 3
    np.array([1.0, 0.0, 0.0,
              -2.0, 2.0, 0.0,
              1.0, -1.5, 0.5]),
    # ------------------ MB32, 首地址23 -----------------# 4
    np.array([0.5, 0.5, 0.0,
              -1.0, 1.0, 0.0,
              0.5, -1.5, 1.0]),
    # ------------------ MB33, 首地址32 -----------------# 5
    np.array([0.5, 0.5, 0.0,
              -1.0, 1.0, 0.0,
              0.5, -1.0, 0.5]),
    # ------------------ MB40, 首地址41 -----------------# 6
    np.array([1.0, 0.0, 0.0, 0.0,
              -3.0, 3.0, 0.0, 0.0,
              3.0, -6.0, 3.0, 0.0,
              -1.0, 3.0, -3.0, 1.0]),
    # ------------------ MB41, 首地址57 -----------------# 7
    np.array([1.0, 0.0, 0.0, 0.0,
              -3.0, 3.0, 0.0, 0.0,
              3.0, -4.5, 1.5, 0.0,
              -1.0, 1.75, -1.0, 0.25]),
    # ------------------ MB42, 首地址73 -----------------# 8
    np.array([0.25, 0.5, 0.25, 0.0,
              -0.75, 0.0, 0.75, 0.0,
              0.75, -1.5, 0.75, 0.0,
              -0.25, 1.0, -1.75, 1.0]),
    # ------------------ MB43, 首地址89 -----------------# 9
    np.array([1.0, 0.0, 0.0, 0.0,
              -3.0, 3.0, 0.0, 0.0,
              3.0, -4.5, 1.5, 0.0,
              -1.0, 1.75, -0.91666666666666666666, 0.16666666666666666666]),
    # ------------------ MB44, 首地址105 -----------------# 10
    np.array([0.25, 0.58333333333333333333, 0.16666666666666666666, 0.0,
              -0.75, 0.25, 0.5, 0.0,
              0.75, -1.25, 0.5, 0.0,
              -0.25, 0.58333333333333333333, -0.58333333333333333333, 0.25]),
    # ------------------ MB45, 首地址121 -----------------# 11
    np.array([0.16666666666666666666, 0.58333333333333333333, 0.25, 0.0,
              -0.5, -0.25, 0.75, 0.0,
              0.5, -1.25, 0.75, 0.0,
              -0.16666666666666666666, 0.91666666666666666666, -1.75, 1.0]),
    # ------------------ MB46, 首地址137 -----------------# 12
    np.array([0.25, 0.58333333333333333333, 0.16666666666666666666, 0.0,
              -0.75, 0.25, 0.5, 0.0,
              0.75, -1.25, 0.5, 0.0,
              -0.25, 0.58333333333333333333, -0.5, 0.16666666666666666666]),
    # ------------------ MB47, 首地址153 -----------------# 13
    np.array([0.16666666666666666666, 0.66666666666666666666, 0.16666666666666666666, 0.0,
              -0.5, 0.0, 0.5, 0.0,
              0.5, -1.0, 0.5, 0.0,
              -0.16666666666666666666, 0.5, -0.58333333333333333333, 0.25]),
    # ------------------ MB48, 首地址169 -----------------# 14
    np.array([0.16666666666666666666, 0.66666666666666666666, 0.16666666666666666666, 0.0,
              -0.5, 0.0, 0.5, 0.0,
              0.5, -1.0, 0.5, 0.0,
              -0.16666666666666666666, 0.5, -0.5, 0.16666666666666666666])]


def get_aux_matrix_offset(order, ctrl_point_num, left_index):
    res = None
    if order == 1:
        res = sample_aux_matrix[0]  # MB1 0
    elif order == 2:
        res = sample_aux_matrix[1]  # MB2 1
    elif order == 3:
        if ctrl_point_num == 3:
            res = sample_aux_matrix[2]  # MB30 5
        else:
            if left_index == 2:
                res = sample_aux_matrix[3]  # MB31 14
            elif left_index == ctrl_point_num - 1:
                res = sample_aux_matrix[4]  # MB32 23
            else:
                res = sample_aux_matrix[5]  # MB33 32
    elif order == 4:
        if ctrl_point_num == 4:
            res = sample_aux_matrix[6]  # MB40 41
        elif ctrl_point_num == 5:
            if left_index == 3:
                res = sample_aux_matrix[7]  # MB41 57
            else:
                res = sample_aux_matrix[8]  # MB42 73
        elif ctrl_point_num == 6:
            if left_index == 3:
                res = sample_aux_matrix[9]  # MB43 89
            elif left_index == 4:
                res = sample_aux_matrix[10]  # MB44 105
            else:
                res = sample_aux_matrix[11]  # MB45 121
        else:
            if left_index == 3:
                res = sample_aux_matrix[9]  # MB43 89
            elif left_index == 4:
                res = sample_aux_matrix[12]  # MB46 137
            elif left_index == ctrl_point_num - 2:
                res = sample_aux_matrix[13]  # MB47 153
            elif left_index == ctrl_point_num - 1:
                res = sample_aux_matrix[11]  # MB45 121
            else:
                res = sample_aux_matrix[14]  # MB48 169
    else:
        raise Exception('order is too high')

    return res.reshape((order, order))


if __name__ == '__main__':
    pass
